# staking denom is `icsstake`, consumer denom & bech32 prefix needs to be set in config because we can't be sure about consumer chain genesis structure
# hermes config must be pre-defined in config/hermes_config.toml

# set number of validator vm instances for each chain (beware, because we're running two chains this results in the double number of instances)
NUM_VALIDATORS=1

# vm configuration for each validator vm, be aware about your system limits!
VAGRANT_NUM_CPU=2
VAGRANT_MEMORY=2048
# A flag that determines wether the generated files and logs are deleted before running tests
CLEAR_FILES_ON_START=true

# provider-chain configuration
PROVIDER_REPO=https://github.com/cosmos/gaia
PROVIDER_VERSION=v18.1.0
PROVIDER_APP=gaiad
PROVIDER_HOME=/home/vagrant/.gaia
PROVIDER_GO_SOURCE=https://go.dev/dl/go1.21.12.linux-amd64.tar.gz

# consumer-chain configuration
CONSUMER_REPO=https://github.com/comdex-official/comdex
CONSUMER_VERSION=v14.0.0
CONSUMER_APP=comdex
CONSUMER_HOME=/home/vagrant/.comdex
CONSUMER_GO_SOURCE=https://go.dev/dl/go1.21.12.linux-amd64.tar.gz

CONSUMER_MIGRATION=true
CONSUMER_MIGRATION_UPDATE_VERSION=v15.0.0

CONSUMER_FEE_AMOUNT=0.025
CONSUMER_FEE_DENOM=ucmdx
CONSUMER_BECH32_PREFIX=comdex
CONSUMER_CHAIN_ID=comdex-test3


# configuration for the upgrade proposal which transitions 
# the sovereign chain to a consumer chain 
CONSUMER_UPGRADE_HEIGHT=30
CONSUMER_UPGRADE_NAME="v15.0.0"
CONSUMER_UPGRADE_TITLE="v15.0.0"
CONSUMER_UPGRADE_SUMMARY="upgrading to consumer chain"

# AUTHORITY is the address of the governance module account. 
# Bech32 conver this string from prefix "evmos" to your consumer prefix: evmos10d07y265gmmuvt4z0w9aw880jnsr700jcrztvm
CONSUMER_AUTHORIY_ACCOUNT="comdex10d07y265gmmuvt4z0w9aw880jnsr700jad380y"

# ICS consumer chain setup for quick simulation
# TOP-N chain: the CONSUMER_TOPN_VALUE percentage of cumulative voting power is automatically opted in
# OPT-IN chain: When CONSUMER_TOPN_VALUE is set to 0, opting in is fully optional
# If CONSUMER_TOPN_VALUE is set to 95, the chain behaves similar to RS (Replicated Security)
CONSUMER_TOPN_VALUE=80

# the log level of the chain binaries can be specified, available options are: trace|debug|info|warn|error|fatal|panic
CHAIN_LOG_LEVEL="info"

# If you want to test key assignment, set this to true. 
# Otherwise, the private validator key from the provider chain will be used when the chain transitions to a consumer chain
KEY_ASSIGNMENT=false

# To make the downloads on the individual virtual machines faster, it is recommended to use a caching server on the host machine
# Set this variable to true if you want to use the caching server. 
# Squid caching server needs to be installed and running on your host machine, a sample config file is provided in the config directory.
CACHE_SERVER=false

# to test your own raw_genesis provide: ./files/user/genesis.json
# CONSUMER_GENESIS_SOURCE=https://raw.githubusercontent.com/elys-network/elys/main/chain/genesis.json

# Proposal source 
# either: fetch proposal from provider chain (use rest endpoint), 
# or to test your own proposal leave this empty and provide: ./files/user/prop.json
# or leave empty for quick simulation
# ORIG_PROP_SOURCE=https://rest.cosmos.directory/cosmoshub/cosmos/gov/v1/proposals/792

# leave empty to build latest hermes version locally
HERMES_SOURCE=https://github.com/informalsystems/hermes/releases/download/v1.10.0/hermes-v1.10.0-x86_64-unknown-linux-gnu.tar.gz
