# gaiad v9.0.3 (latest) requires go1.18 but has been updated to go1.20 in a recent commit 
# neutron v1.0.0-rc1 requires go1.20
# staking denom is `icsstake`, consumer denom & bech32 prefix needs to be set in config because we can't be sure about consumer chain genesis structure
# hermes config must be pre-defined in config/hermes_config.toml

# set number of validator vm instances for each chain (beware, because we're running two chains this results in the double number of instances)
NUM_VALIDATORS=2

# A flag that determines wether the generated files and logs are deleted before running tests
CLEAR_FILES_ON_START=true

# provider-chain configuration
PROVIDER_REPO=https://github.com/cosmos/gaia
PROVIDER_VERSION=v15.2.0
PROVIDER_APP=gaiad
PROVIDER_HOME=/home/vagrant/.gaia
PROVIDER_GO_SOURCE=https://go.dev/dl/go1.21.9.linux-amd64.tar.gz

# consumer-chain configuration
CONSUMER_REPO=https://github.com/MSalopek/elys
CONSUMER_VERSION=ccv-integration
CONSUMER_APP=elysd
CONSUMER_HOME=/home/vagrant/.elys
CONSUMER_GO_SOURCE=https://go.dev/dl/go1.21.9.linux-amd64.tar.gz

CONSUMER_FEE_DENOM=uelys
CONSUMER_BECH32_PREFIX=elys

# ICS consumer chain setup for quick simulation
# CONSUMER_ICS_TYPE available options are: rs|pss 
# > deprecated: rs defaults to pss top-95
# for PSS chains the CONSUMER_TOPN_VALUE defines the type of the chain
# TOP-N chain: the CONSUMER_TOPN_VALUE percentage of voting power that is opted in
# OPT-IN chain: the CONSUMER_TOPN_VALUE is set to 0, opting in is fully optional
CONSUMER_ICS_TYPE=pss
CONSUMER_TOPN_VALUE=80

# the log level of the chain binaries can be specified, available options are: trace|debug|info|warn|error|fatal|panic
CHAIN_LOG_LEVEL="info"

# If you want to test key assignment, set this to true. 
# Otherwise, the private validator key from the provider chain will be used when the chain transitions to a consumer chain
KEY_ASSIGNMENT=false

# To make the downloads on the individual virtual machines faster, it is recommended to use a caching server on the host machine
# Set this variable to true if you want to use the caching server. 
# Squid caching server needs to be installed and running on your host machine, a sample config file is provided in the config directory.
CACHE_SERVER=false

# to test your own raw_genesis leave this empty and provide: ./raw_genesis.json
CONSUMER_GENESIS_SOURCE=https://raw.githubusercontent.com/elys-network/elys/main/chain/genesis.json

# either: fetch proposal from provider chain (use rest endpoint), 
# or to test your own proposal leave this empty and provide: ./proposal.json
# or leave empty for quick simulation
# ORIG_PROP_SOURCE=https://rest.cosmos.directory/cosmoshub/cosmos/gov/v1/proposals/792

# leave empty to build latest hermes version locally
HERMES_SOURCE=https://github.com/informalsystems/hermes/releases/download/v1.8.2/hermes-v1.8.2-x86_64-unknown-linux-gnu.tar.gz
