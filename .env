# staking denom is `icsstake`, consumer denom & bech32 prefix needs to be set in config because we can't be sure about consumer chain genesis structure
# hermes config must be pre-defined in ./hermes_config.toml

# set number of validator vm instances for each chain (beware, because we're running two chains this results in the double number of instances)
NUM_VALIDATORS=2

# provider-chain configuration
PROVIDER_REPO=https://github.com/cosmos/gaia
PROVIDER_VERSION=v10.0.1
PROVIDER_APP=gaiad
PROVIDER_HOME=/home/vagrant/.gaia
PROVIDER_GO_SOURCE=https://go.dev/dl/go1.20.5.linux-amd64.tar.gz

# consumer-chain configuration
CONSUMER_REPO=https://github.com/Stride-Labs/stride
CONSUMER_VERSION=v11.0.0
CONSUMER_APP=strided
CONSUMER_HOME=/home/vagrant/.stride
CONSUMER_GO_SOURCE=https://go.dev/dl/go1.19.13.linux-amd64.tar.gz
CONSUMER_MIGRATION=true
CONSUMER_MIGRATION_UPDATE_VERSION=ics-testnet-17fa

CONSUMER_FEE_DENOM=ustrd
CONSUMER_BECH32_PREFIX=stride

# to test your own raw_genesis leave this empty and provide: raw_genesis.json (simple consumer chain) 
# or migration_state_export.json for consumer migration with state export from a running mainnet (sovereign-to-consumer migration)
# CONSUMER_GENESIS_SOURCE=migration_state_export.json

# to test your own proposal leave this empty and provide: proposal.json
ORIG_PROP_NR=799
ORIG_REST_ENDPOINT=https://rest.cosmos.directory/cosmoshub

# leave empty to build latest hermes version locally
HERMES_SOURCE=https://github.com/informalsystems/hermes/releases/download/v1.4.1/hermes-v1.4.1-x86_64-unknown-linux-gnu.tar.gz

# sovereign-to-consumer-migration
#
# we need to start a sovereign chain using the migration_state_export or a valid genesis file
# for testing purposes this chain launches at spawn time "just like a normal consumer chain", but with a sovereign validator set
# the sovereign chain then needs to go through a planned chain upgrade, in which it will call initGenesis on a genesis file provided in ~/.sovereign/config/genesis.json
# this genesis file located in ~/.sovereign has the ccv_consumer_state
# the upgrade will perform a complete switch of the validator set and only the ccv_consumer_state validators can finalize the upgrade block